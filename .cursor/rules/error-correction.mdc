---
description: Mandatory framework for learning from errors and building new rules to improve the knowledge base.
globs: 
alwaysApply: false
---
---

description: Mandatory framework for learning from errors and building new rules to improve the knowledge base.

globs: 

alwaysApply: false

---

# Self-Learning and Error Correction


## Overview

This rule establishes a framework for Cursor to learn from its mistakes and build a growing knowledge base about this codebase. When Cursor makes an error that requires correction, it should analyze the error, understand the correct solution, and update its knowledge base accordingly. This includes strict rules for where to place new rules.


## Error Analysis Process

When a code suggestion generates an error or requires manual correction:


1. Identify the specific error type and root cause

2. Document the incorrect approach that was taken

3. Document the correct solution that fixed the issue

4. Create or update rules with this new knowledge


## Automatic Learning

Cursor should maintain a registry of common errors it has encountered and their solutions in the `.cursor/rules/registry` directory. Each time a new pattern is identified follow these rules:


1. Always place rule files in PROJECT_ROOT/.cursor/rules/registry:

    .cursor/rules/registry

    ├── your-rule-name.mdc

    ├── another-rule.mdc

    └── ...


2. Follow the naming convention:

    - Use kebab-case for filenames

    - Always use .mdc extension

    - Make names descriptive of the rule's purpose


3. Directory structure:

    PROJECT_ROOT/

    ├── .cursor/

    │   └── rules/

    │       └── registry/

    │           ├── your-rule-name.mdc

    │           └── ...

    └── ...


4. Never place rule files:

    - In the project root

    - In subdirectories outside .cursor/rules

    - In any other location


5. Determine which type of rule it should be:

    - `auto_attached`, characterized by a `glob` value which is a list of filename glob patterns which should invoke the rule.

    - `agent_requested`, characterized by a `description` which is read by the agent to determine if the rule should be invoked.

    - `always`, characterized by always including the rule into every agent context.

    - `manual`, characterized by requiring direct reference to the file for the rule to be invoked by another rule.

6. Add YAML frontmatter metadata with `description`, `type`, and `glob` if this will be an `auto_attached` rule.

7. Include examples of both incorrect and correct implementations.

8. Reference any related rules that might apply.


NOTE: The rule files that are located in `.cursor/rules/` and not inside of `.cursor/rules/registry/` are the anchor rules that seeded this project with its guidelines.


examples:

  - input: |

      # Bad: Rule file in wrong location

      rules/my-rule.mdc

      my-rule.mdc

      .rules/my-rule.mdc


      # Good: Rule file in correct location

      .cursor/rules/my-rule.mdc

    output: "Correctly placed Cursor rule file"

    

## How to define which rule type 


The yaml-header for a rule file has 4 patterns, depending on which of the 4 modes was selected.


1. Auto-attached rules -  ❌ `description`, ✅ `globs`, ❌ `alwaysApply`.

```yaml

---

description: 

globs: content/**/*.md,*.scss

alwaysApply: false

---

```

2. Agent requested rules - ✅ `description`, ❌ `globs`, ❌ `alwaysApply`.


```yaml

---

description: Rule description

globs: 

alwaysApply: false

---

```

3. Always apply rules - ❌ `description`, ❌ `globs`, ✅ `alwaysApply`.

```yaml

---

description: 

globs: 

alwaysApply: true

---

```

4. Manual rules - ❌ `description`, ❌ `globs`, ❌ `alwaysApply`.

```yaml

---

description: 

globs: 

alwaysApply: false

---

```


## MDC Rules Validation Framework

### Critical Error: Missing YAML Frontmatter

**Error Pattern:**
- MDC rule files without YAML frontmatter
- Files starting directly with markdown content
- Missing required metadata fields

**Root Cause:**
- Creating MDC files without following the established format
- Not validating file structure before committing
- Incomplete file creation process

**Prevention Rules:**

#### Rule 1: YAML Frontmatter Validation
```yaml
---
description: YAML Frontmatter Validation for MDC Rules
globs:
  - ".cursor/rules/**/*.mdc"
ruleType: Always
---

# YAML Frontmatter Validation

## Required Fields Check
Every MDC rule file MUST have these fields in YAML frontmatter:

```yaml
---
description: [Clear description of what the rule does]
globs: [Array of file patterns this rule applies to]
ruleType: [Always | Auto Attached | Agent Requested | Manual]
---
```

## Validation Checklist
- [ ] File starts with `---` on first line
- [ ] `description` field is present and descriptive
- [ ] `globs` field is present (array format)
- [ ] `ruleType` field is present with valid value
- [ ] File ends with `---` after YAML
- [ ] No content before first `---`
- [ ] No content between YAML and markdown

## Error Detection
```bash
# Check for missing frontmatter
grep -L "^---" .cursor/rules/*.mdc

# Check for incomplete frontmatter
grep -L "description:" .cursor/rules/*.mdc
grep -L "globs:" .cursor/rules/*.mdc
grep -L "ruleType:" .cursor/rules/*.mdc
```
```

#### Rule 2: MDC File Creation Protocol
```yaml
---
description: MDC File Creation Protocol
globs:
  - ".cursor/rules/**/*.mdc"
ruleType: Always
---

# MDC File Creation Protocol

## Creation Steps (MUST follow in order)
1. **Create file with YAML frontmatter first**
2. **Validate frontmatter syntax**
3. **Add markdown content**
4. **Test file structure**
5. **Commit with validation**

## Template for New MDC Files
```yaml
---
description: [DESCRIPTION]
globs:
  - "[GLOB_PATTERN]"
ruleType: [Always | Auto Attached | Agent Requested | Manual]
---

# [Title]

## [Content starts here]
```

## Validation Commands
```bash
# Validate YAML syntax
yamllint .cursor/rules/*.mdc

# Check file structure
head -10 .cursor/rules/*.mdc | grep -E "^(---|description:|globs:|ruleType:)"
```
```

### Critical Error: Missing Essential Rules

**Error Pattern:**
- Project has incomplete rule coverage
- Missing rules for major file types
- No rules for critical development areas

**Root Cause:**
- Not analyzing project structure comprehensively
- Creating rules reactively instead of proactively
- Missing systematic rule coverage analysis

**Prevention Rules:**

#### Rule 3: Project Rule Coverage Analysis
```yaml
---
description: Project Rule Coverage Analysis
globs:
  - "**/*"
ruleType: Always
---

# Project Rule Coverage Analysis

## Required Rule Categories
Every project MUST have rules for:

### 1. Development Standards
- [ ] Git workflow and commit standards
- [ ] Code quality and linting
- [ ] Testing standards
- [ ] Documentation standards

### 2. Technology-Specific Rules
- [ ] Language-specific standards (JS, CSS, HTML, etc.)
- [ ] Framework-specific patterns
- [ ] Platform-specific requirements (Firefox Extension, etc.)

### 3. Project-Specific Rules
- [ ] Architecture patterns
- [ ] File organization
- [ ] Naming conventions
- [ ] Security requirements

## Coverage Analysis Process
1. **Scan project structure** for all file types
2. **Identify missing rule categories**
3. **Create comprehensive rule set**
4. **Validate rule coverage**
5. **Document rule dependencies**

## File Type Coverage Matrix
```
File Type          | Rule Status | Rule File
-------------------|-------------|------------------
*.js               | [ ]         | javascript-standards.mdc
*.css              | [ ]         | css-styling-standards.mdc
*.json             | [ ]         | configuration-standards.mdc
*.md               | [ ]         | documentation-standards.mdc
manifest.json      | [ ]         | firefox-extension-development.mdc
tests/**/*         | [ ]         | testing-standards.mdc
```

## Validation Commands
```bash
# Check rule coverage
find . -type f -name "*.js" -o -name "*.css" -o -name "*.json" | head -10
ls .cursor/rules/*.mdc | wc -l
```
```

#### Rule 4: Rule Dependency Management
```yaml
---
description: Rule Dependency Management
globs:
  - ".cursor/rules/**/*.mdc"
ruleType: Always
---

# Rule Dependency Management

## Rule Hierarchy
1. **Foundation Rules** (Always apply)
   - mdc-rules-standards.mdc
   - git-workflow.mdc
   - project-standards.mdc

2. **Technology Rules** (Auto attached)
   - language-specific rules
   - framework-specific rules
   - platform-specific rules

3. **Project Rules** (Auto attached)
   - architecture rules
   - file organization rules
   - naming convention rules

## Dependency Validation
- [ ] All foundation rules exist
- [ ] Technology rules cover all file types
- [ ] Project rules align with architecture
- [ ] No circular dependencies
- [ ] Rule descriptions are clear

## Missing Rule Detection
```bash
# Check for essential rules
ls .cursor/rules/ | grep -E "(standards|workflow|development)" | wc -l

# Expected minimum rules
# - mdc-rules-standards.mdc
# - git-workflow.mdc
# - firefox-extension-development.mdc
# - css-styling-standards.mdc
# - testing-standards.mdc
# - documentation-standards.mdc
```
```

### Critical Error: Incomplete File Coverage

**Error Pattern:**
- Rules don't cover all relevant file types
- Missing glob patterns for important files
- Inconsistent file pattern matching

**Root Cause:**
- Not analyzing project structure thoroughly
- Using generic glob patterns
- Missing specific file type considerations

**Prevention Rules:**

#### Rule 5: Comprehensive Glob Pattern Analysis
```yaml
---
description: Comprehensive Glob Pattern Analysis
globs:
  - "**/*"
ruleType: Always
---

# Comprehensive Glob Pattern Analysis

## Project Structure Analysis
Before creating rules, analyze:

```bash
# Find all file types
find . -type f | sed 's/.*\.//' | sort | uniq -c | sort -nr

# Find all directories
find . -type d | sort

# Find configuration files
find . -name "*.json" -o -name "*.yaml" -o -name "*.yml" -o -name "*.config.*"
```

## Required Glob Patterns
Every project should have rules covering:

### Configuration Files
- `manifest.json` - Extension manifest
- `package.json` - Node.js dependencies
- `*.config.js` - Build configuration
- `.eslintrc*` - Linting configuration
- `jest.config.js` - Testing configuration

### Source Code
- `content-scripts/**/*.js` - Content scripts
- `background/**/*.js` - Background scripts
- `popup/**/*.js` - Popup scripts
- `styles/**/*.css` - Stylesheets
- `tests/**/*.js` - Test files

### Documentation
- `README.md` - Project overview
- `**/*.md` - All documentation
- `specs/**/*.md` - Specifications
- `docs/**/*.md` - Documentation

## Glob Pattern Validation
```bash
# Test glob patterns
for pattern in "**/*.js" "**/*.css" "**/*.json" "**/*.md"; do
  echo "Testing pattern: $pattern"
  find . -path "./node_modules" -prune -o -path "./.git" -prune -o -name "$pattern" -print | head -5
done
```
```

## Error Categories

### MDC Rules Errors
- **Missing YAML Frontmatter**: Files without required metadata
- **Incomplete Frontmatter**: Missing required fields
- **Invalid Rule Types**: Incorrect ruleType values
- **Missing Essential Rules**: No rules for major file types
- **Incomplete Coverage**: Rules don't cover all file types

### File Organization Errors
- **Wrong Directory**: Files placed outside .cursor/rules
- **Incorrect Naming**: Files don't follow naming convention
- **Missing Extensions**: Files without .mdc extension
- **Duplicate Rules**: Multiple rules for same purpose

### Content Errors
- **Incomplete Examples**: Missing correct/incorrect examples
- **Unclear Descriptions**: Vague or misleading descriptions
- **Missing Validation**: No validation procedures
- **Outdated Information**: Rules not updated with project changes

## Error Correction Workflow

### When an Error is Detected:

1. **Document the Error**
   ```markdown
   ## Error Report
   - **Date**: [Date]
   - **Error Type**: [Category]
   - **File**: [Affected file]
   - **Description**: [What went wrong]
   - **Root Cause**: [Why it happened]
   - **Solution**: [How it was fixed]
   ```

2. **Create Prevention Rule**
   - Add to appropriate error category
   - Include validation steps
   - Provide examples
   - Update related rules

3. **Update Knowledge Base**
   - Add to registry if new pattern
   - Update existing rules if needed
   - Document dependencies

4. **Validate Fix**
   - Test the correction
   - Verify prevention works
   - Update documentation

## Examples

### ❌ Incorrect: Missing YAML Frontmatter
```markdown
# Git Workflow Standards

## Commit Standards
- Use conventional commits
- Follow branch naming
```

### ✅ Correct: Proper YAML Frontmatter
```yaml
---
description: Git Workflow and Conventional Commit Standards
globs:
  - "**/*.js"
  - "**/*.css"
  - "**/*.json"
  - "**/*.md"
  - "manifest.json"
ruleType: Always
---

# Git Workflow Standards

## Commit Standards
- Use conventional commits
- Follow branch naming
```

### ❌ Incorrect: Incomplete Rule Coverage
```
.cursor/rules/
├── git-workflow.mdc
└── mdc-rules-standards.mdc
```

### ✅ Correct: Comprehensive Rule Coverage
```
.cursor/rules/
├── mdc-rules-standards.mdc
├── git-workflow.mdc
├── firefox-extension-development.mdc
├── css-styling-standards.mdc
├── testing-standards.mdc
├── documentation-standards.mdc
└── task-planning.mdc
```

## Validation Commands

### Pre-commit Validation
```bash
# Validate all MDC files have frontmatter
find .cursor/rules -name "*.mdc" -exec sh -c 'head -1 "$1" | grep -q "^---$" || echo "Missing frontmatter: $1"' _ {} \;

# Validate required fields
find .cursor/rules -name "*.mdc" -exec sh -c 'grep -q "description:" "$1" && grep -q "globs:" "$1" && grep -q "ruleType:" "$1" || echo "Missing required fields: $1"' _ {} \;

# Check rule coverage
ls .cursor/rules/*.mdc | wc -l
```

### Continuous Validation
```bash
# Automated validation script
#!/bin/bash
echo "Validating MDC rules..."

# Check for missing frontmatter
missing_frontmatter=$(find .cursor/rules -name "*.mdc" -exec sh -c 'head -1 "$1" | grep -q "^---$" || echo "$1"' _ {} \;)
if [ ! -z "$missing_frontmatter" ]; then
    echo "❌ Files missing frontmatter:"
    echo "$missing_frontmatter"
    exit 1
fi

# Check for required fields
missing_fields=$(find .cursor/rules -name "*.mdc" -exec sh -c 'grep -q "description:" "$1" && grep -q "globs:" "$1" && grep -q "ruleType:" "$1" || echo "$1"' _ {} \;)
if [ ! -z "$missing_fields" ]; then
    echo "❌ Files missing required fields:"
    echo "$missing_fields"
    exit 1
fi

echo "✅ All MDC rules validated successfully"
```

## Registry Maintenance

### Adding New Error Patterns
1. **Identify the pattern** in the error
2. **Document the root cause**
3. **Create prevention rules**
4. **Add to appropriate category**
5. **Update validation procedures**

### Updating Existing Rules
1. **Review error reports**
2. **Identify common patterns**
3. **Update prevention strategies**
4. **Test validation procedures**
5. **Document changes**

This framework ensures that every error becomes a learning opportunity and strengthens the rule system over time.
